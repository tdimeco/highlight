const fs = require('fs');
const path = require('path');
const glob = require('glob');
const { styleNames, langNames } = require('./alias');

// Register all css files
let cssTask = Promise.all(
	glob.sync('Highlight/scripts/styles/**/*.min.css', {absolute: true}).map( (filepath) => {
		return new Promise( (resolve, reject) => {
			fs.readFile(filepath, {encoding: 'utf8'}, (err, data) => {
				if (err) return reject(err);

				let isBase16 = filepath.includes('base16');
				let filename = path.basename(filepath, '.min.css');
				let style =
					styleNames[ filename ] ||
					filename
						.replace(/(?:^|[._-])([a-zA-Z0-9])/g, ($0, $1) => ' ' + $1.toUpperCase() )
						.trim();

				let fullFilename = isBase16 ? 'base16/' + filename : filename;
				let fullStylename = isBase16 ? style + ' (Base16)' : style;

				resolve({filename: fullFilename, style: fullStylename});
			} );
		} );
	} )
)
.then( (names) => {
	console.log('✨  Successfully registered css files.');

	return (
		'public let hlStyles:[String: String] = [\n' +
		names
			.sort( (a, b) => a.style.localeCompare(b.style) )
			.map( ({filename, style}) => `\t"${style}": "${filename}",\n` )
			.join('') +
		']'
	);
} )
.catch( err => {
	console.log(err);
} );

// Package js files
let jsTask = Promise.all(
	glob.sync('node_modules/highlight.js/lib/languages/+([a-zA-Z0-9_-]).js', {absolute: true}).map( (filepath) => {
		return new Promise( (resolve, reject) => {
			fs.readFile(filepath, {encoding: 'utf8'}, (err, data) => {
				if (err) return reject(err);

				let filename = path.basename(filepath, '.js');
				data = '(function() {' + data + '})();'
				data = data.replace(/module.exports\s*=\s*(\w+)/, `highlightGlobalInstance.registerLanguage('${filename}', $1)`)

				// Use regex to find the language name in the file header
				const langNameMatch = data.match(/Language:\s*(.+)/);
				const langname = langNames[ filename ] || (langNameMatch ? langNameMatch[1].trim() : filename);

				resolve( { lang: filename, langname, data } );
			} );
		} );
	} )
)
.then( (langs) => {
	let hljs = fs.readFileSync('node_modules/highlight.js/lib/core.js', {encoding: 'utf8'});

	hljs = hljs.replace(/module.exports\s*=\s*(\w+);/, `var highlightGlobalInstance = highlight;`)

	langs.sort( (a, b) => a.langname.localeCompare(b.langname) );
	hljs += langs.map( ({data}) => data ).join('');

	console.log('⏱  Compiling the Highlight package file...');

	return new Promise( (resolve, reject) => {
		const code = hljs;

		fs.writeFile('Highlight/scripts/highlight.pack.js', code, (err) => {
			if (err) return reject(err);

			console.log('✨  Successfully generated highlight.pack.js');

			resolve(
				`public let hlLangCount: UInt16 = ${langs.length}` +
				'\n\n' +
				'public let hlLanguages: [String: String] = [\n' +
				langs
					.map( ({lang, langname}) => `\t"${langname}": "${lang}",\n` )
					.join('') +
				']'
			);
		} );
	} );
} )
.catch( err => {
	console.log(err);
} );

// Generate the constant file.
Promise.all( [ jsTask, cssTask ] ).then( ([langs, styles]) => {
	fs.writeFile(
		'Highlight/Constant.swift',
		`
//
// Constant.swift
// Highlight
//
// This file is automatically generated.
// DO NOT MODIFY THIS FILE MANUALLY
//

${langs}

${styles}
		`.trim() + '\n',
		() => {}
	)
} );
